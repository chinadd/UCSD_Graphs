/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which reprsents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
package roadgraph;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.BiFunction;
import geography.GeographicPoint;
import util.GraphLoader;


/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which represents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
public class MapGraph {
	//TODO: Add your member variables here in WEEK 2
	//HashMap stores locations of intersections
	private HashMap<GeographicPoint, MapNode> pointNodeMap;
	//HashSet stores edges connecting vertices
	private HashSet<MapEdge> edges;
	
	
	/** 
	 * Create a new empty MapGraph 
	 */
	public MapGraph()
	{
		// TODO: Implement in this constructor in WEEK 2
		pointNodeMap = new HashMap<GeographicPoint, MapNode>();
		edges = new HashSet<MapEdge>();				
	}
	
	/**
	 * Get the number of vertices (road intersections) in the graph
	 * @return The number of vertices in the graph.
	 */
	public int getNumVertices()
	{
		//TODO: Implement this method in WEEK 2
		return pointNodeMap.values().size();
	}

	
	/**
	 * print the intersections, which are the vertices in this graph.
	 */
	public void printNodes(){
		System.out.println("********Printing Nodes********");
		System.out.println("There are " + getNumVertices()+"Nodes: \n");
		for (GeographicPoint pt: pointNodeMap.keySet()){
			MapNode n = pointNodeMap.get(pt);
			System.out.println(n);
		}
	}
	
	/** Returns the nodes in terms of their geographic locations */	
	public Set<GeographicPoint> getVertices()
	{
		//TODO: Implement this method in WEEK 2
		return pointNodeMap.keySet();
	}
	// Returns the neighbour nodes from a MapNode
	public Set<MapNode> getNeighbors(MapNode node){
		return node.getNeighbors();
	}
	
	/**
	 * Get the number of road segments in the graph
	 * @return The number of edges in the graph.
	 */
	public int getNumEdges()
	{
		//TODO: Implement this method in WEEK 2
		return edges.size();
	}

	/** Add a node corresponding to an intersection at a Geographic Point
	 * If the location is already in the graph or null, this method does 
	 * not change the graph.
	 * @param location  The location of the intersection
	 * @return true if a node was added, false if it was not (the node
	 * was already in the graph, or the parameter is null).
	 */
	/**
	 * Add a node corresponding to an intersection
	 *
	 * @param latitude
	 *            The latitude of the location
	 * @param longitude
	 *            The longitude of the location
	 */
	
	
	public boolean addVertex(GeographicPoint location)
	{
		// TODO: Implement this method in WEEK 2
		MapNode n = pointNodeMap.get(location);
		//test if node is already contained
		if (n == null){
			n = new MapNode(location);
			pointNodeMap.put(location, n);
			return true;			
		}
		else
		{
			System.out.println("Warning: nodes already exists");	
			return false;		
		}
	}
	
	/**
	 * Adds a directed edge to the graph from pt1 to pt2.  
	 * Precondition: Both GeographicPoints have already been added to the graph
	 * @param from The starting point of the edge
	 * @param to The ending point of the edge
	 * @param roadName The name of the road
	 * @param roadType The type of the road
	 * @param length The length of the road, in km
	 * @throws IllegalArgumentException If the points have not already been
	 *   added as nodes to the graph, if any of the arguments is null,
	 *   or if the length is less than 0.
	 */
	
	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName,
			String roadType) throws IllegalArgumentException{

		//TODO: Implement this method in WEEK 2
		MapNode n1 = pointNodeMap.get(from);
		MapNode n2 = pointNodeMap.get(to);
		
		if (n1==null){
			throw new NullPointerException("addEdge: from "+from+"is not found");
		}
		if (n2 == null){
			throw new NullPointerException("addEdge: to "+to+"is not found");
		}
		addEdge(n1, n2, roadName, roadType, MapEdge.DEFAULT_LENGTH);
	}
	
	public void addEdge(GeographicPoint pt1, GeographicPoint pt2, String roadName, String roadType, double length)
			throws IllegalArgumentException{
		MapNode n1 = pointNodeMap.get(pt1);
		MapNode n2 = pointNodeMap.get(pt2);

		// check nodes are valid
		if (n1 == null)
			throw new NullPointerException("addEdge: pt1:" + pt1 + "is not in graph");
		if (n2 == null)
			throw new NullPointerException("addEdge: pt2:" + pt2 + "is not in graph");

		addEdge(n1, n2, roadName, roadType, length);
	}
	

	// Add an edge when you already know the nodes involved in the edge
	private void addEdge(MapNode n1, MapNode n2, String roadName, String roadType, double length) 
			throws IllegalArgumentException{
		MapEdge edge = new MapEdge(roadName, roadType, n1, n2, length);
		edges.add(edge);
		n1.addEdge(edge);
	}
	
	// check validity of start and end node
	private boolean arePreconditionsFulfilled(GeographicPoint start, GeographicPoint goal) {
		if (start == null || goal == null) {
			throw new NullPointerException("Cannot find route from or to null node");
		}
		if (pointNodeMap.get(start) == null) {
			System.err.println("Start node " + start + " does not exist");
			return false;
		}
		if (pointNodeMap.get(goal) == null) {
			System.err.println("End node " + goal + " does not exist");
			return false;
		}
		return true;
	}

	
	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        
        return bfs(start, goal, temp);
	}
	
	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, 
			 					     GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 2
		//data structure for BFS
		HashMap<MapNode,MapNode> parentMap = new HashMap<MapNode,MapNode>();	
		Queue<MapNode> toExplore = new LinkedList<MapNode>();			
		HashSet<MapNode> visited = new HashSet<MapNode>();
		
		MapNode startNode = pointNodeMap.get(start);
		MapNode endNode = pointNodeMap.get(goal);
		
		//setup check validity of inputs
		if (!arePreconditionsFulfilled(start,goal)){
			return null;
		}
			

		// setup to begin BFS	
		//add startNode to the list of nodes to explore
		toExplore.add(startNode);
		//next stores the right next node to be explored		
		MapNode next = null;
		
		while(!toExplore.isEmpty()){
			next = toExplore.remove();
			
			// Hook for visualization.  See writeup.
			nodeSearched.accept(next.getLocation());
			
			//reach the end of the path
			if(next.equals(endNode)){
				break;//destination found
				}else{
					//explore neighbor nodes
					Set<MapNode> neighbors = getNeighbors(next);
					for (MapNode n: neighbors){
						if(!visited.contains(n)){
							visited.add(n);
							parentMap.put(n, next);
							toExplore.add(n);
						}
					}
				}					
		}
		
		if(!next.equals(endNode)){
			System.out.println("No path from "+start + "to "+ goal);
			return null;
		}else{
			// Reconstruct the parent path
			List<GeographicPoint> path =
					reconstructPath(parentMap, startNode, endNode,next.equals(endNode));

			return path;
		}

	}
	
	/** Reconstruct a path from start to goal using the parentMap
	 *
	 * @param parentMap the HashNode map of children and their parents
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from
	 *   start to goal (including both start and goal).
	 */

	private List<GeographicPoint>
	reconstructPath(HashMap<MapNode,MapNode> parentMap,
					MapNode start, MapNode goal,boolean pathfound)
	{
		//path constructed from BFS search
		LinkedList<GeographicPoint> path = new LinkedList<GeographicPoint>();
		MapNode current = goal;//reconstruct from the sendNode
		double dist = 0.0;
		int time = 0; 
		
		while (!current.equals(start)) {
			path.addFirst(current.getLocation());//add parent node to the front of list
			MapNode temp = parentMap.get(current);
			//2 way to compute path length
			HashMap<MapNode, Double> distancesMap = calculateDistanesMap(temp);
			dist += distancesMap.get(current);
			System.out.println("edge length: "+distancesMap.get(current));
			/*
			for (MapEdge e:temp.getEdges()){
				if(e.getEndNode().equals(current)){
					dist += e.getLength();
					}		
			}*/
			current = temp;
		}

		// add start
		path.addFirst(start.getLocation());
		System.out.println("total distance: "+dist);
		
		return path;
	}
	
	
	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		// You do not need to change this method.
        Consumer<GeographicPoint> temp = (x) -> {};
        return dijkstra(start, goal, temp);
	}
	
	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, 
			  GeographicPoint goal, Consumer<GeographicPoint> nodeSearched){
		return searchOnWeightedGraph(start, goal, nodeSearched, (a, b) -> 0.0);
	}
	
	public List<GeographicPoint> searchOnWeightedGraph(GeographicPoint start, 
										  GeographicPoint goal, Consumer<GeographicPoint> nodeSearched, 
										  BiFunction<MapNode, MapNode, Double> f)
	{
		// TODO: Implement this method in WEEK 3
		
		if (!arePreconditionsFulfilled(start, goal)) {
			return null;
		}

		MapNode startNode = pointNodeMap.get(start);
		MapNode endNode = pointNodeMap.get(goal);

		HashMap<MapNode, MapNode> parentMap = new HashMap<MapNode, MapNode>();
		PriorityQueue<MapNode> toExplore = new PriorityQueue<MapNode>();
		HashSet<MapNode> visited = new HashSet<MapNode>();

		initializeDistances();

		startNode.setActualDistance(0.0);
		startNode.setDistance(0.0);

		toExplore.add(startNode);
		MapNode next = null;

		while (!toExplore.isEmpty()) {
			next = toExplore.poll();

			if (!visited.contains(next)) {
				visited.add(next);

				// hook for visualization
				nodeSearched.accept(next.getLocation());

				if (next.equals(endNode)) {
					break;
				}

				HashMap<MapNode, Double> distancesMap = calculateDistanesMap(next);

				for (MapNode neighbor : getNeighbors(next)) {
					if (!visited.contains(neighbor)) {
						double distanceOfNode = next.getActualDistance() + distancesMap.get(neighbor);
						if (distanceOfNode < neighbor.getActualDistance()) {
							neighbor.setActualDistance(distanceOfNode);
							distanceOfNode += f.apply(neighbor, endNode);
							neighbor.setDistance(distanceOfNode);
							parentMap.put(neighbor, next);
							toExplore.offer(neighbor);
						}
					}
				}
			}
		}
		
		System.out.println("Visited: " + visited.size());

		// Reconstruct the parent path
		if(!next.equals(endNode)){
			System.out.println("No path from "+start + "to "+ goal);
			return null;
		}else{
			return reconstructPath(parentMap, startNode, endNode, endNode.equals(next));
		}
	}
			
	private void initializeDistances() {
				for (MapNode m : pointNodeMap.values()) {
					m.setActualDistance(Double.MAX_VALUE);
					m.setDistance(Double.MAX_VALUE);
				}
			}

	private HashMap<MapNode, Double> calculateDistanesMap(MapNode next) {
				HashMap<MapNode, Double> distancesMap = new HashMap<>();

				for (MapEdge e : next.getEdges()) {
					distancesMap.put(e.getEndNode(), e.getLength());
				}
				return distancesMap;
			}

	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        return aStarSearch(start, goal, temp);
	}
	
	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, 
											 GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 3
		
		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		
		return searchOnWeightedGraph(start, goal, nodeSearched, (a, b) -> a.getLocation().distance(b.getLocation()));
	}

	
	
	public static void main(String[] args)
	{
		System.out.print("Making a new map...");
		MapGraph firstMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", firstMap);
		System.out.println("DONE.");
		firstMap.printNodes();
		//select start and end point
		GeographicPoint testStart = new GeographicPoint(1.0, 1.0);
		GeographicPoint testEnd = new GeographicPoint(8.0, -1.0);
		
		//find route with breadth first search
		List<GeographicPoint> testroute = firstMap.bfs(testStart, testEnd);
		System.out.println(testroute);
		
		// You can use this method for testing.  
				
		/* Here are some test cases you should try before you attempt 
		 * the Week s3 End of Week Quiz, EVEN IF you score 100% on the 
		 * programming assignment.
		 */
		
		MapGraph simpleTestMap = new MapGraph();
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", simpleTestMap);
		
		//GeographicPoint testStart = new GeographicPoint(1.0, 1.0);
		//GeographicPoint testEnd = new GeographicPoint(8.0, -1.0);
		
		System.out.println("Test 1 using simpletest: Dijkstra should be 9 and AStar should be 5");
		List<GeographicPoint> testroute1 = simpleTestMap.dijkstra(testStart,testEnd);
		List<GeographicPoint> testroute2 = simpleTestMap.aStarSearch(testStart,testEnd);
				
		MapGraph testMap = new MapGraph();
		GraphLoader.loadRoadMap("data/maps/utc.map", testMap);
		
		// A very simple test using real data
		testStart = new GeographicPoint(32.869423, -117.220917);
		testEnd = new GeographicPoint(32.869255, -117.216927);
		System.out.println("Test 2 using utc: Dijkstra should be 13 and AStar should be 5");
		testroute1 = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
				
		// A slightly more complex test using real data
		testStart = new GeographicPoint(32.8674388, -117.2190213);
		testEnd = new GeographicPoint(32.8697828, -117.2244506);
		System.out.println("Test 3 using utc: Dijkstra should be 37 and AStar should be 10");
		testroute1 = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
				
		/* Use this code in Week 3 End of Week Quiz */
		MapGraph theMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		System.out.println("DONE.");

		GeographicPoint start = new GeographicPoint(32.8648772, -117.2254046);
		GeographicPoint end = new GeographicPoint(32.8660691, -117.217393);
			
		List<GeographicPoint> route = theMap.dijkstra(start,end);
		List<GeographicPoint> route2 = theMap.aStarSearch(start,end);
		
	}
	
}
